# https://kubernetes.io/docs/concepts/workloads/controllers/statefulset/
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  namespace: mysql
  labels:
    app: mysql
spec:
  selector:
    matchLabels:
      app: mysql # has to match .spec.template.metadata.labels
  serviceName: "mysql" # 写请求的service
  replicas: 2 # 一个master mysql和一个slave mysql
  template:
    metadata:
      labels:
        app: mysql # has to match .spec.selector.matchLabels
    spec:
      # initContainers 参考文献: https://blog.csdn.net/shenhonglei1234/article/details/106248054
      # 初始容器, 在Pod启动前都会启动的容器, 它们总是运行到完成, 每个都必须在下一个启动之前成功完成
      initContainers: 
      # 第一个初始容器用于初始化各种mysql启动的信息
      - name: init-mysql
        image: mysql:5.7-debian
        # secret的使用方式: https://boilingfrog.github.io/2021/06/27/k8s%E4%B8%AD%E7%9A%84Secret%E7%90%86%E8%A7%A3/#opaque-secret
        # 第一种方式: 挂载到volume中, 这种挂载的方式可以实现secret的自动更新
        # 第二种方式: 导出到环境变量中, 除非容器被重启, 不然不会被自动更新
        env: # 为容器设置环境变量, 其实就是一个export, 将Secret导出到环境变量中
        - name: MYSQL_ROOT_PASSWORD
          valueFrom: # 和value是相对的，如果使用value就是直接进行设置, 如果使用valueFrom就是从其他来源设置, 比如secret或者configmap
            secretKeyRef: # 如果是configmap就是 configMapKeyRef:
              name: mysql-secret
              key: password
        command:
          - bash
          - "-c"
          - |
            set -ex
            # 从Pod的序号, 生成server-id
            [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
            ordinal=${BASH_REMATCH[1]}
            echo [mysqld] > /mnt/conf.d/server-id.cnf
            # 由于server-id不能为0，因此给ID加100来避开它
            echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
            # 如果Pod的序号为0，说明它是Master节点，从ConfigMap里把Master的配置文件拷贝到/mnt/conf.d目录下, 否则，拷贝ConfigMap里的Slave的配置文件
            if [[ ${ordinal} -eq 0 ]]; then
              cp /mnt/config-map/master.cnf /mnt/conf.d
            else
              cp /mnt/config-map/slave.cnf /mnt/conf.d
            fi
        volumeMounts: # TODO(xlc): 定义挂载位置, 把需要的内容挂载到这里就可以了?
          - name: conf
            mountPath: /mnt/conf.d
          - name: config-map 
            mountPath: /mnt/config-map
      - name: clone-mysql
        image: gcr.io/google-samples/xtrabackup:1.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: password
        command:
        - bash
        - "-c"
        - |
          set -ex
          # 拷贝操作只需要在第一次启动时进行，所以数据已经存在则跳过
          [[ -d /var/lib/mysql/mysql ]] && exit 0
          [[ $(hostname) =~ -([0-9]+)$ ]] || exit 1
          ordinal=${BASH_REMATCH[1]}
          # Master 节点（序号为 0）不需要这个操作
          [[ $ordinal == 0 ]] && exit 0
          # 使用ncat指令，远程地从前一个节点拷贝数据到本地
          ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
          # 执行 --prepare，这样拷贝来的数据就可以用作恢复了
          xtrabackup --prepare --target-dir=/var/lib/mysql
        volumeMounts:
          - name: data
            mountPath: /var/lib/mysql
            subPath: mysql
          - name: conf # 这里的名字和上一个容器的conf是一致的, 这里就是sidecar模式, 上一个容器的作用就是把数据拷贝到目录下, 然后这个目录又在这个容器下挂载到/etc/mysql/conf.d位置中
            mountPath: /etc/mysql/conf.d
      containers:
      - name: mysql
        image: mysql:5.7-debian
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: data # sidecar模式, 上一个容器将数据拷贝到目录下, 然后这个目录又在这个容器下挂载到/var/lib/mysql位置中
          mountPath: /var/lib/mysql
          subPath: mysql
        - name: conf # sidecar模式
          mountPath: /etc/mysql/conf.d
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
        livenessProbe: # 这里是利用mysqladmin做数据库的登录, 确定容器是否正常启动了, 如果没有启动就执行重启策略
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          exec: 
            command: ["mysqladmin", "ping", "-uroot", "-p${MYSQL_ROOT_PASSWORD}"]
        readinessProbe: # 这里两个探测模式是一样的, 个人感觉没啥意义
          initialDelaySeconds: 5
          periodSeconds: 2
          timeoutSeconds: 1
          exec:
            command: ["mysqladmin", "ping", "-uroot", "-p${MYSQL_ROOT_PASSWORD}"]
      - name: xtrabackup
        image: gcr.io/google-samples/xtrabackup:1.0
        ports:
        - name: xtrabackup
          containerPort: 3307
        env:
          - name: MYSQL_ROOT_PASSWORD
            valueFrom:
              secretKeyRef:
                name: mysql-secret
                key: password
        command:
        - bash
        - "-c"
        - |
          set -ex
          cd /var/lib/mysql
          # 从备份信息文件里读取MASTER_LOG_FILE和MASTER_LOG_POS这2个字段的值，用来拼装集群初始化SQL
          if [[ -f xtrabackup_slave_info ]]; then
            # 如果xtrabackup_slave_info文件存在，说明这个备份数据来自于另一个Slave节点
            # 这种情况下，XtraBackup工具在备份的时候，就已经在这个文件里自动生成了“CHANGE MASTER TO”SQL语句
            # 所以，只需要把这个文件重命名为change_master_to.sql.in，后面直接使用即可
            mv xtrabackup_slave_info change_master_to.sql.in
            # 所以，也就用不着xtrabackup_binlog_info了
            rm -f xtrabackup_binlog_info
          elif [[ -f xtrabackup_binlog_info ]]; then
            # 如果只是存在xtrabackup_binlog_info文件，说明备份来自于Master节点，就需要解析这个备份信息文件，读取所需的两个字段的值
            [[ $(cat xtrabackup_binlog_info) =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
            rm xtrabackup_binlog_info
            # 把两个字段的值拼装成SQL，写入change_master_to.sql.in文件
            echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
                  MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
          fi
          # 如果存在change_master_to.sql.in，就意味着需要做集群初始化工作
          if [[ -f change_master_to.sql.in ]]; then
            # 但一定要先等MySQL容器启动之后才能进行下一步连接MySQL的操作
            echo "Waiting for mysqld to be ready（accepting connections）"
            until mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} -e "SELECT 1"; do sleep 1; done
            echo "Initializing replication from clone position"
            # 将文件change_master_to.sql.in改个名字
            # 防止这个Container重启的时候，因为又找到了change_master_to.sql.in，从而重复执行一遍初始化流程
            mv change_master_to.sql.in change_master_to.sql.orig
            # 使用change_master_to.sql.orig的内容，也就是前面拼装的SQL，组成一个完整的初始化和启动Slave的SQL语句
            mysql -h 127.0.0.1 -uroot -p${MYSQL_ROOT_PASSWORD} << EOF
          $(< change_master_to.sql.orig),
            MASTER_HOST='mysql-0.mysql.mysql',
            MASTER_USER='root',
            MASTER_PASSWORD='${MYSQL_ROOT_PASSWORD}',
            MASTER_CONNECT_RETRY=10;
          START SLAVE;
          EOF
          fi
          # 使用ncat监听3307端口。
          # 它的作用是，在收到传输请求的时候，直接执行xtrabackup --backup命令，备份MySQL的数据并发送给请求者
          exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
            "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root --password=${MYSQL_ROOT_PASSWORD}"
        volumeMounts:
          - name: data
            mountPath: /var/lib/mysql
            subPath: mysql
          - name: conf
            mountPath: /etc/mysql/conf.d
      volumes:
      - name: conf
        emptyDir: {} # 这里是一个临时变量, 让宿主机搞一个临时的文件夹挂载就行了
      - name: config-map
        configMap:
          name: mysql
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      storageClassName: local-storage
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 10Gi
---
